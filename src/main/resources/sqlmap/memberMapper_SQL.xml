<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="kr.or.ddit.mapper.IMemberMapper">
     <resultMap type="CrudMember" id="memberMap">
      <!-- property : VO 필드명 지정, column : 테이블 필드명 지정 / 둘을 매핑하기 -->
      <id property="userNo" column="user_no"/>
      <result property="userId" column="user_id"/>
      <result property="userPw" column="user_pw"/>
      <result property="userName" column="user_name"/>
      <result property="regDate" column="reg_Date"/>
      <result property="updDate" column="upd_Date"/>
      <!-- <collection> : list 타입을 재정의할 때 사용할 수 있는 태그
                      2줄 이상, 여러줄의 결과 행을 받아와야 할 때 / 일대다 관계(1:N) 테이블 매핑하기 -->
      <!-- VO의 authList 필드는 crudMember 테이블에 있는 필드가 아니기 때문에 바로 매핑이 불가능하다. 
           검색할 쿼리의 결과 테이블을 기반으로 한번 더 재정의가 필요 -->
      <collection property="authList" resultMap="authMap"/>
   </resultMap>
      
   <!-- 같은 권한이 2개 이상일 때, 반환되는 키와 값이 같기 때문에 1개로 인식하고 출력도 1개의 권한만 출력된다. -->
   <!-- resultMap : 같은 키와 값이 2개 이상일 때, 키와 값이 같기 때문에 반환되는 행이 여러줄이어도 해당 키와 값들을 1개로 인식함 -->
   <resultMap type="CrudMemberAuth" id="authMap">
      <result property="userNo" column="user_no"/>
      <result property="auth" column="auth"/>
   </resultMap>
  
  	<insert id="create" parameterType="CrudMember" useGeneratedKeys="true">
  		<selectKey keyProperty="userNo" resultType="int" order="BEFORE">
  			select seq_member.nextval from dual
  		</selectKey>
  		insert into member(
  			user_no, user_id, user_pw, user_name, reg_date, upd_date
  		)values(
  			#{userNo}, #{userId}, #{userPw}, #{userName}, sysdate, sysdate
  		)
  	
  	</insert>
  	
  	<insert id = "createAuth" parameterType="CrudMemberAuth">
  		insert into member_auth(
  			user_no, auth
  		)values(
  			#{userNo}, #{auth}
  		)
  	</insert>
  	
  	<select id="list" resultType="CrudMember">
  		select
  			user_no, user_id, user_pw, user_name, reg_date
  		from member
  		order by user_no desc
  	</select>
  	
  	<select id="read" parameterType="int" resultMap="memberMap">
  		select
  			m.user_no, user_id, user_pw, user_name, reg_date, upd_date, auth
  		from member m left outer join member_auth ma on(m.user_no = ma.user_no)
  		where m.user_no = #{userNo}
  	</select>
  	
  	<update id="modify" parameterType="CrudMember">
  		update member
  		set 
  			user_name = #{userName}
  		where user_no = #{userNo}
  	</update>
  	
  	<delete id="deleteAuth" parameterType="int">
  		delete from member_auth
  		where user_no = #{userNo}
  	</delete>
  	
  	<delete id="delete" parameterType="int">
  		delete from member
  		where user_no = #{userNo}
  	</delete>
  	
  </mapper>